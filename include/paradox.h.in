#ifndef __PARADOX_H__
#define __PARADOX_H__

#define PX_USE_RECODE @PX_HAVE_RECODE@
#define PX_USE_ICONV @PX_HAVE_ICONV@

#include <stdbool.h>
#if PX_USE_RECODE
#include <recode.h>
#else
#if PX_USE_ICONV
#include <iconv.h>
#endif
#endif

#ifdef WIN32

#define PXLIB_CALL __cdecl

#ifdef PXLIB_EXPORTS
#define PXLIB_API __declspec(dllexport) /* prepare a DLL (internal use only) */
#elif defined(PXLIB_DLL)
#define PXLIB_API __declspec(dllimport) /* PXlib clients: import PXlib DLL */
#else /* !PXLIB_DLL */
#define PXLIB_API /* */  /* default: generate or use static library */

#endif  /* !PXLIB_DLL */

#endif /* !WIN32 */

#ifndef PXLIB_CALL
#define PXLIB_CALL
#endif
#ifndef PXLIB_API
#define PXLIB_API
#endif

#define px_true 1
#define px_false 0

/* Error codes */
#define PX_MemoryError 1
#define PX_IOError 2
#define PX_RuntimeError 3
#define PX_Warning 100

/* Field types */
#define pxfAlpha        0x01
#define pxfDate         0x02
#define pxfShort        0x03
#define pxfLong         0x04
#define pxfCurrency     0x05
#define pxfNumber       0x06
#define pxfLogical      0x09
#define pxfMemoBLOb     0x0C
#define pxfBLOb         0x0D
#define pxfFmtMemoBLOb  0x0E
#define pxfOLE          0x0F
#define pxfGraphic      0x10
#define pxfTime         0x14
#define pxfTimestamp    0x15
#define pxfAutoInc      0x16
#define pxfBCD          0x17
#define pxfBytes        0x18

/* File types */
#define pxfFileTypIndexDB         0
#define pxfFileTypPrimIndex       1
#define pxfFileTypNonIndexDB      2
#define pxfFileTypNonIncSecIndex  3
#define pxfFileTypSecIndex        4
#define pxfFileTypIncSecIndex     5
#define pxfFileTypNonIncSecIndexG 6
#define pxfFileTypSecIndexG       7
#define pxfFileTypIncSecIndexG    8

struct px_field {
	char *px_fname;
	char px_ftype;
	int px_flen;
	int px_fdc;
};

struct px_head {
	char *px_tablename;
	int px_recordsize;
	char px_filetype;
	int px_fileversion;
	int px_numrecords;           // number of records as in header
	int px_theonumrecords;       // number of records that fit in data blocks
	int px_numfields;
	int px_maxtablesize;
	int px_headersize;
	int px_fileblocks;
	int px_indexfieldnumber;
	int px_writeprotected;
	int px_doscodepage;
	int px_primarykeyfields;
	char px_modifiedflags1;
	char px_modifiedflags2;
	char px_sortorder;
	int px_autoinc;
	char px_refintegrity;
	struct px_field *px_fields;
};

typedef struct px_doc pxdoc_t;
typedef struct px_datablockinfo pxdatablockinfo_t;
typedef struct px_blob pxblob_t;
typedef struct px_head pxhead_t;
typedef struct px_field pxfield_t;
typedef struct px_pindex pxpindex_t;

struct px_doc {
	/* database file */
	FILE *px_fp;       /* File pointer of file */
	char *px_name;     /* Name of file */
	int px_close_fp;   /* set to true if file pointer must be closed */
	pxhead_t *px_head; /* Pointer to header of file */
	void *px_data;     /* Pointer to data of file (only used in prim. index) */

	/* primary index file */
	pxdoc_t *px_pindex;

	int in_error;

	size_t (*writeproc)(pxdoc_t *p, void *data, size_t size);
	void (*errorhandler)(pxdoc_t *p, int level, const char* msg);
	void *(*malloc)(pxdoc_t *p, size_t size, const char *caller);
	void *(*calloc)(pxdoc_t *p, size_t size, const char *caller);
	void *(*realloc)(pxdoc_t *p, void *mem, size_t size, const char *caller);
	void  (*free)(pxdoc_t *p, void *mem);

	char *targetencoding;
#if PX_USE_RECODE
	RECODE_OUTER recode_outer;
	RECODE_REQUEST recode_request;
#else
#if PX_USE_ICONV
	iconv_t iconvcd;
#endif
#endif
};

struct px_blob {
	FILE *px_fp;
	char *px_name;
	int px_close_fp;
	pxdoc_t *pxdoc;
};

struct px_datablockinfo {
	long blockpos;     /* the start of the block in the file */
	long recordpos;    /* the start of the record in the file */
	int size;          /* the size of the block */
	int recno;         /* the recno with the block starting with 0 */
	int numrecords;    /* the number of records in the block */
	int number;        /* the block number from the data block header */
	int realnumber;    /* the block number count (first block is 0) */
};

struct px_pindex {
	char *data;
	int blocknumber;
	int numrecords;
	int dummy;
};

PXLIB_API int PXLIB_CALL
PX_get_majorversion(void);

PXLIB_API int PXLIB_CALL
PX_get_minorversion(void);

PXLIB_API int PXLIB_CALL
PX_get_subminorversion(void);

PXLIB_API int PXLIB_CALL
PX_has_recode_support(void);

PXLIB_API int PXLIB_CALL
PX_is_bigendian(void);

PXLIB_API pxdoc_t* PXLIB_CALL
PX_new2(void  (*errorhandler)(pxdoc_t *p, int type, const char *msg),
        void* (*allocproc)(pxdoc_t *p, size_t size, const char *caller),
        void* (*reallocproc)(pxdoc_t *p, void *mem, size_t size, const char *caller),
        void  (*freeproc)(pxdoc_t *p, void *mem));

PXLIB_API pxdoc_t* PXLIB_CALL
PX_new(void);

PXLIB_API int PXLIB_CALL
PX_open_fp(pxdoc_t *pxdoc, FILE *fp);

PXLIB_API int PXLIB_CALL
PX_open_file(pxdoc_t *pxdoc, char *filename);

PXLIB_API int PXLIB_CALL
PX_create_file(pxdoc_t *pxdoc, pxfield_t *pxf, int numfields, char *filename);

PXLIB_API int PXLIB_CALL
PX_create_fp(pxdoc_t *pxdoc, pxfield_t *pxf, int numfields, FILE *fp);

PXLIB_API int PXLIB_CALL
PX_read_primary_index(pxdoc_t *pindex);

PXLIB_API int PXLIB_CALL
PX_add_primary_index(pxdoc_t *pxdoc, pxdoc_t *pindex);

PXLIB_API char * PXLIB_CALL
PX_get_record(pxdoc_t *pxdoc, int recno, char *data);

PXLIB_API char * PXLIB_CALL
PX_get_record2(pxdoc_t *pxdoc, int recno, char *data, int *deleted, pxdatablockinfo_t *pxdbinfo);

PXLIB_API int PXLIB_CALL
PX_put_record(pxdoc_t *pxdoc, char *data);

PXLIB_API void PXLIB_CALL
PX_close(pxdoc_t *pxdoc);

PXLIB_API void PXLIB_CALL
PX_delete(pxdoc_t *pxdoc);

PXLIB_API pxfield_t* PXLIB_CALL
PX_get_fields(pxdoc_t *pxdoc);

PXLIB_API pxfield_t* PXLIB_CALL
PX_get_field(pxdoc_t *pxdoc, int i);

PXLIB_API int PXLIB_CALL
PX_get_num_fields(pxdoc_t *pxdoc);

PXLIB_API int PXLIB_CALL
PX_get_num_records(pxdoc_t *pxdoc);

PXLIB_API int PXLIB_CALL
PX_set_targetencoding(pxdoc_t *pxdoc, char *encoding);

PXLIB_API int PXLIB_CALL
PX_set_tablename(pxdoc_t *pxdoc, char *tablename);

PXLIB_API pxblob_t* PXLIB_CALL
PX_new_blob(pxdoc_t *pxdoc);

PXLIB_API int PXLIB_CALL
PX_open_blob_fp(pxblob_t *pxdoc, FILE *fp);

PXLIB_API int PXLIB_CALL
PX_open_blob_file(pxblob_t *pxdoc, char *filename);

PXLIB_API void PXLIB_CALL
PX_close_blob(pxblob_t *pxdoc);

PXLIB_API char* PXLIB_CALL
PX_read_blobdata(pxblob_t *pxblob, int offset, size_t size);

/* Data conversion functions */
/* Functions to read data from a record */
PXLIB_API int PXLIB_CALL
PX_get_data_alpha(pxdoc_t *pxdoc, char *data, int len, char **value);

PXLIB_API int PXLIB_CALL
PX_get_data_bytes(pxdoc_t *pxdoc, char *data, int len, char **value);

PXLIB_API int PXLIB_CALL
PX_get_data_double(pxdoc_t *pxdoc, char *data, int len, double *value);

PXLIB_API int PXLIB_CALL
PX_get_data_long(pxdoc_t *pxdoc, char *data, int len, long *value);

PXLIB_API int PXLIB_CALL
PX_get_data_short(pxdoc_t *pxdoc, char *data, int len, short int *value);

PXLIB_API int PXLIB_CALL
PX_get_data_byte(pxdoc_t *pxdoc, char *data, int len, char *value);

/* Funktion to add data to a record */
PXLIB_API void PXLIB_CALL
PX_put_data_alpha(pxdoc_t *pxdoc, char *data, int len, char *value);

PXLIB_API void PXLIB_CALL
PX_put_data_bytes(pxdoc_t *pxdoc, char *data, int len, char *value);

PXLIB_API void PXLIB_CALL
PX_put_data_double(pxdoc_t *pxdoc, char *data, int len, double value);

PXLIB_API void PXLIB_CALL
PX_put_data_long(pxdoc_t *pxdoc, char *data, int len, int value);

PXLIB_API void PXLIB_CALL
PX_put_data_short(pxdoc_t *pxdoc, char *data, int len, short int value);

PXLIB_API void PXLIB_CALL
PX_put_data_byte(pxdoc_t *pxdoc, char *data, int len, char value);

#endif

/*
 * Local variables:
 * tab-width: 4
 * c-basic-offset: 4
 * End:
 * vim600: sw=4 ts=4 fdm=marker
 * vim<600: sw=4 ts=4
 */
